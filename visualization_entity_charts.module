<?php

/**
 * @file
 * Code for the Visualization Entity Charts feature.
 */

include_once 'visualization_entity_charts.features.inc';

/**
 * Implements hook_form_alter().
 */
function visualization_entity_charts_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'eck__entity__form_add_visualization_ve_chart':
    case 'eck__entity__form_edit_visualization_ve_chart':
      $form['#attached']['libraries_load'][] = array('recline');
      $form['#attached']['libraries_load'][] = array('d3');
      $form['#attached']['libraries_load'][] = array('nvd3');
      $form['#attached']['libraries_load'][] = array('reclineViewNvd3');
      $form['#attached']['libraries_load'][] = array('select2');
      $form['#attached']['libraries_load'][] = array('csv');
      $form['#attached']['css'][] = drupal_get_path('module', 'visualization_entity_charts') . '/ve_chart.css';
      drupal_add_js(drupal_get_path('module', 'visualization_entity_charts') . '/visualization_entity_charts.js', array('weight' => 100));
      break;

  }
}
/**
 * Implements hook_entity_view().
 */
function visualization_entity_charts_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'visualization' && $entity->type == 've_chart') {
    $entity->content['#prefix'] = '<div id="graph"></div>';

    libraries_load('recline');
    libraries_load('d3');
    libraries_load('nvd3');
    libraries_load('reclineViewNvd3');
    libraries_load('csv');
    $entity->content['#attached']['css'][] = drupal_get_path('module', 'visualization_entity_charts') . '/ve_chart.css';
    drupal_add_js(drupal_get_path('module', 'visualization_entity_charts') . '/visualization_entity_charts_view.js', array('weight' => 100));
  }
}
/**
 * Implements hook_theme().
 */
function visualization_entity_charts_theme($existing, $type, $theme, $path) {
  return array(
    'eck__entity__form_add_visualization_ve_chart' => array(
      'render element' => 'form',
      'template' => 've-chart-form',
      'path' => drupal_get_path('module', 'visualization_entity_charts'),
    ),
    'eck__entity__form_edit_visualization_ve_chart' => array(
      'render element' => 'form',
      'template' => 've-chart-form',
      'path' => drupal_get_path('module', 'visualization_entity_charts'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function visualization_entity_charts_libraries_info() {
  $libraries = array();
  $libraries['nvd3'] = array(
    'name' => 'NVD3',
    'vendor url' => 'https://github.com/novus/nvd3',
    'download url' => 'https://github.com/novus/nvd3/archive/master.zip',
    'path' => '',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "(\d+\.\d+\.\d+)"/',
    ),
    'dependencies' => array('d3'),
    'files' => array(
      'js' => array(
        'nv.d3.min.js',
      ),
      'css' => array(
        'nv.d3.min.css',
      ),
    ),
  );
  $libraries['d3'] = array(
    'name' => 'D3',
    'vendor url' => 'https://github.com/mbostock/d3',
    'download url' => 'https://github.com/mbostock/d3/archive/master.zip',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "(\d+\.\d+\.\d+)"/',
    ),
    'files' => array(
      'js' => array(
        'd3.min.js',
      ),
    ),
  );
  $libraries['reclineViewNvd3'] = array(
    'name' => 'recline.view.nvd3.js',
    'vendor url' => 'https://github.com/NuCivic/recline.view.nvd3.js',
    'download url' => 'https://github.com/NuCivic/recline.view.nvd3.js/archive/master.zip',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "(\d+\.\d+\.\d+)"/',
    ),
    'files' => array(
      'js' => array(
        'src/recline.view.nvd3.js',
      ),
    ),
  );
  $libraries['select2'] = array(
    'name' => 'select2',
    'vendor url' => 'https://github.com/select2/select2/tree/4.0.0-beta.1',
    'version' => '4.0.0-beta.1',
    'files' => array(
      'js' => array(
        'dist/js/select2.full.js',
      ),
      'css' => array(
        'dist/css/select2.min.css',
      ),
    ),
  );
  $libraries['csv'] = array(
    'name' => 'csv',
    'vendor url' => 'https://github.com/okfn/csv.js',
    'version' => '0.0.1',
    'files' => array(
      'js' => array(
        'csv.js',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function visualization_entity_charts_block_info() {
  $blocks = array();
  $blocks['ve_chart_button'] = array(
    'info' => t('Viz Entity Chart Button'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function visualization_entity_charts_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 've_chart_button':
      $block['subject'] = '';
      $block['content'] = visualization_entity_charts_button_block();
      break;
  }
  return $block;
}

/**
 * Creates viz entity chart button.
 */
function visualization_entity_charts_button_block() {
  return 'button here';
}

/**
 * Implements hook_libraries_info_alter().
 */
function visualization_entity_charts_libraries_info_alter(&$libraries) {
  if (isset($libraries['recline']['files']['js'][11]) && $libraries['recline']['files']['js'][11] == 'vendor/timeline/js/timeline.js') {
    unset($libraries['recline']['files']['js'][11]);
  }
}

/**
 * Preprocess for chart add form.
 */
function template_preprocess_eck__entity__form_add_visualization_ve_chart(&$vars) {
  template_preprocess_eck__entity__form_edit_visualization_ve_chart($vars);
}

/**
 * Preprocess for chart edit form.
 */
function template_preprocess_eck__entity__form_edit_visualization_ve_chart(&$vars) {
  $form = $vars['form'];
  $vars['save'] = $form['actions'];
  $vars['title'] = $form['title'];
  $vars['settings'] = $form['field_ve_settings'];
  unset($vars['form']['title']);
  unset($vars['form']['field_ve_settings']);
  unset($vars['form']['actions']);
  $available_fields = field_info_instances('visualization', 've_chart');
  unset($available_fields['field_ve_settings']);
  $fields = array();
  $vars['fields'] = array();
  foreach ($available_fields as $field => $instance) {
    $fields[$field] = $form[$field]['#weight'];
  }
  asort($fields);
  foreach ($fields as $field => $weight) {
    $vars['fields'][$field] = $form[$field];
    unset($vars['form'][$field]);
  }
}
